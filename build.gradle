/**
 * Copyright 2022 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.7.20'
    repositories {
        google()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath 'com.hiya:jacoco-android:0.2'
        classpath "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:2.0.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext.projectArtifactId = { project ->
    if (project.name == 'library') {
        return 'android-maps-utils'
    } else {
        return null
    }
}

allprojects {
    group = 'com.google.maps.android'
    version = '3.4.0'
    project.ext.artifactId = rootProject.ext.projectArtifactId(project)
}

/**
 * Publishing and signing info
 */
subprojects { project ->
    if (project.ext.artifactId == null) return

    apply plugin: 'com.android.library'
    apply plugin: 'com.hiya.jacoco-android'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    // Code coverage
    jacoco {
        toolVersion = "0.8.4"
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    task javadoc( type: Javadoc) {
        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.encoding = "utf-8"
        failOnError = false
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        source = android.sourceSets.main.java.srcDirs
        doFirst {
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }
        options.addStringOption('-ignore-source-errors', '-quiet')
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            aar(MavenPublication) {
                groupId project.group
                artifactId project.ext.artifactId
                version project.version

                pom {
                    name = project.ext.artifactId
                    description = 'Handy extensions to the Google Maps Android API.'
                    url = 'https://github.com/googlemaps/android-maps-utils'

                    scm {
                        url = 'scm:git@github.com:googlemaps/android-maps-utils.git'
                        connection = 'scm:git@github.com:googlemaps/android-maps-utils.git'
                        developerConnection = 'scm:git@github.com:googlemaps/android-maps-utils.git'
                    }

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    organization {
                        name = 'Google Inc'
                        url = 'http://developers.google.com/maps'
                    }

                    developers {
                        developer {
                            name = 'Google Inc.'
                        }
                    }
                }

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.api.allDependencies.each { dependency ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }

                afterEvaluate {
                    artifact "$buildDir/outputs/aar/$project.name-release.aar"
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }

        repositories {
            maven {
                name = "mavencentral"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.aar
    }
}

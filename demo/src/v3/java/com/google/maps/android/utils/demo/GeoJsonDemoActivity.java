/**
 * DO NOT EDIT THIS FILE.
 * <p>
 * This source code was autogenerated from source code within the `demo/src/gms` directory
 * and is not intended for modifications. If any edits should be made, please do so in the
 * corresponding file under the `demo/src/gms` directory.
 */
/*
 * Copyright 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.maps.android.utils.demo;

import android.graphics.Color;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;

import com.google.android.libraries.maps.CameraUpdateFactory;
import com.google.android.libraries.maps.model.BitmapDescriptor;
import com.google.android.libraries.maps.model.BitmapDescriptorFactory;
import com.google.android.libraries.maps.model.LatLng;
import com.google.android.libraries.maps.model.Polygon;
import com.google.android.libraries.maps.model.PolygonOptions;
import com.google.maps.android.data.DataPolygon;
import com.google.maps.android.data.Feature;
import com.google.maps.android.data.Geometry;
import com.google.maps.android.data.geojson.GeoJsonFeature;
import com.google.maps.android.data.geojson.GeoJsonLayer;
import com.google.maps.android.data.geojson.GeoJsonMultiPolygon;
import com.google.maps.android.data.geojson.GeoJsonPointStyle;
import com.google.maps.android.data.geojson.GeoJsonPolygon;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class GeoJsonDemoActivity extends BaseDemoActivity {

    private final static String mLogTag = "GeoJsonDemo";

    /**
     * Assigns a color based on the given magnitude
     */
    private static float magnitudeToColor(double magnitude) {
        if (magnitude < 1.0) {
            return BitmapDescriptorFactory.HUE_CYAN;
        } else if (magnitude < 2.5) {
            return BitmapDescriptorFactory.HUE_GREEN;
        } else if (magnitude < 4.5) {
            return BitmapDescriptorFactory.HUE_YELLOW;
        } else {
            return BitmapDescriptorFactory.HUE_RED;
        }
    }

    protected int getLayoutId() {
        return R.layout.geojson_demo;
    }

    @Override
    protected void startDemo(boolean isRestore) {
        if (!isRestore) {
            getMap().moveCamera(CameraUpdateFactory.newLatLng(new LatLng(31.4118, -103.5355)));
        }
        // Download the GeoJSON file.
        //retrieveFileFromUrl();
        // Alternate approach of loading a local GeoJSON file.
        retrieveFileFromResource();
    }

    private void retrieveFileFromUrl() {
        new DownloadGeoJsonFile().execute(getString(R.string.geojson_url));
    }

    private void retrieveFileFromResource() {
        try {
            Log.d(mLogTag,"Creating layer");
            GeoJsonLayer layer = new GeoJsonLayer(getMap(), R.raw.large, this);
            Log.d(mLogTag,"Layer created, adding to map");
            addGeoJsonLayerToMap(layer);
            Log.d(mLogTag,"Layer added to map");
        } catch (IOException e) {
            Log.e(mLogTag, "GeoJSON file could not be read");
        } catch (JSONException e) {
            Log.e(mLogTag, "GeoJSON file could not be converted to a JSONObject");
        }
    }

    /**
     * Adds a point style to all features to change the color of the marker based on its magnitude
     * property
     */
    private void addColorsToMarkers(GeoJsonLayer layer) {
        // Iterate over all the features stored in the layer
        for (GeoJsonFeature feature : layer.getFeatures()) {
            // Check if the magnitude property exists
            if (feature.getProperty("mag") != null && feature.hasProperty("place")) {
                double magnitude = Double.parseDouble(feature.getProperty("mag"));

                // Get the icon for the feature
                BitmapDescriptor pointIcon = BitmapDescriptorFactory
                        .defaultMarker(magnitudeToColor(magnitude));

                // Create a new point style
                GeoJsonPointStyle pointStyle = new GeoJsonPointStyle();

                // Set options for the point style
                pointStyle.setIcon(pointIcon);
                pointStyle.setTitle("Magnitude of " + magnitude);
                pointStyle.setSnippet("Earthquake occured " + feature.getProperty("place"));

                // Assign the point style to the feature
                feature.setPointStyle(pointStyle);
            }
        }
    }

    private class DownloadGeoJsonFile extends AsyncTask<String, Void, GeoJsonLayer> {

        @Override
        protected GeoJsonLayer doInBackground(String... params) {
            try {
                // Open a stream from the URL
                InputStream stream = new URL(params[0]).openStream();

                String line;
                StringBuilder result = new StringBuilder();
                BufferedReader reader = new BufferedReader(new InputStreamReader(stream));

                while ((line = reader.readLine()) != null) {
                    // Read and save each line of the stream
                    result.append(line);
                }

                // Close the stream
                reader.close();
                stream.close();

                return new GeoJsonLayer(getMap(), new JSONObject(result.toString()));
            } catch (IOException e) {
                Log.e(mLogTag, "GeoJSON file could not be read");
            } catch (JSONException e) {
                Log.e(mLogTag, "GeoJSON file could not be converted to a JSONObject");
            }
            return null;
        }

        @Override
        protected void onPostExecute(GeoJsonLayer layer) {
            if (layer != null) {
                addGeoJsonLayerToMap(layer);
            }
        }
    }
    void addToMap(GeoJsonLayer layer) {
        for (GeoJsonFeature feature : layer.getFeatures()) {
            if (feature.hasGeometry()) {
                Geometry geometry = feature.getGeometry();
                if (geometry.getGeometryType().equals("MultiPolygon")) {
                    Log.d(mLogTag,"Adding multipolygon");
                    GeoJsonMultiPolygon multiPolygon= (GeoJsonMultiPolygon)geometry;
                    ArrayList<Polygon> polygons = new ArrayList<>();
                    for (GeoJsonPolygon geoJsonPolygon : multiPolygon.getPolygons()) {
                        //polygons.add(addPolygonToMap(polygonStyle.toPolygonOptions(), geoJsonPolygon));
                        DataPolygon polygon = (DataPolygon)geoJsonPolygon;
                        PolygonOptions polygonOptions=new PolygonOptions()
                                .strokeColor(Color.BLACK)
                                //.addAll(pgo)
                                .fillColor(Color.argb(20, 0, 255, 0))
                                .zIndex(1)
                                //.clickable(true) // not clickable since takes clicks anywhere
                                .strokeWidth(8);

                        // First array of coordinates are the outline
                        polygonOptions.addAll(polygon.getOuterBoundaryCoordinates());
                        // Following arrays are holes
                        List<List<LatLng>> innerBoundaries = polygon.getInnerBoundaryCoordinates();
                        for (List<LatLng> innerBoundary : innerBoundaries) {
                            polygonOptions.addHole(innerBoundary);
                        }
                        Log.d(mLogTag,"Add multipolygon to map");
                        getMap().addPolygon(polygonOptions);
                        Log.d(mLogTag,"Add multipolygon to map done");
                    }


                }
            }

        }
    }
    private void addGeoJsonLayerToMap(GeoJsonLayer layer) {
        boolean simpleAdd=true;
        if (simpleAdd==true) {
            addToMap(layer);
            return;
        }
        addColorsToMarkers(layer);

        layer.addLayerToMap();
        // Demonstrate receiving features via GeoJsonLayer clicks.
        layer.setOnFeatureClickListener(new GeoJsonLayer.GeoJsonOnFeatureClickListener() {
            @Override
            public void onFeatureClick(Feature feature) {
                Toast.makeText(GeoJsonDemoActivity.this,
                        "Feature clicked: " + feature.getProperty("title"),
                        Toast.LENGTH_SHORT).show();
            }

        });


    }
}

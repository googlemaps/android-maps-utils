{
    "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
    "version" : "2.1.0",
    "runs" : [
        {
            "tool": {
                "driver": {
                    "name": "Android Lint",
                    "fullName": "Android Lint (in gradle)",
                    "version": "8.7.0",
                    "semanticVersion": "8.7.0",
                    "organization": "Google",
                    "informationUri": "https://developer.android.com/studio/write/lint",
                    "fullDescription": {
                        "text": "Static analysis originally for Android source code but now performing general analysis"
                    },
                    "language": "en-US",
                    "rules": [
                        {
                            "id": "DefaultLocale",
                            "shortDescription": {
                                "text": "Implied default locale in case conversion"
                            },
                            "fullDescription": {
                                "text": "Calling String#toLowerCase() or #toUpperCase() without specifying an explicit locale is a common source of bugs. The reason for that is that those methods will use the current locale on the user's device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for i is not I.\n\nIf you want the methods to just perform ASCII replacement, for example to convert an enum name, call String#toUpperCase(Locale.ROOT) instead. If you really want to use the current locale, call String#toUpperCase(Locale.getDefault()) instead.",
                                "markdown": "Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user's device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.\n\nIf you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.ROOT)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
                            },
                            "defaultConfiguration": {
                                "level": "warning",
                                "rank": 50
                            },
                            "properties": {
                                "tags": [
                                    "Correctness"
                                ]
                            }
                        },
                        {
                            "id": "IconDuplicatesConfig",
                            "shortDescription": {
                                "text": "Identical bitmaps across various configurations"
                            },
                            "fullDescription": {
                                "text": "If an icon is provided under different configuration parameters such as drawable-hdpi or -v11, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.",
                                "markdown": "If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional."
                            },
                            "defaultConfiguration": {
                                "level": "warning",
                                "rank": 60
                            },
                            "properties": {
                                "tags": [
                                    "Icons",
                                    "Usability"
                                ]
                            }
                        },
                        {
                            "id": "IconLocation",
                            "shortDescription": {
                                "text": "Image defined in density-independent drawable folder"
                            },
                            "fullDescription": {
                                "text": "The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to drawable-mdpi and consider providing higher and lower resolution versions in drawable-ldpi, drawable-hdpi and drawable-xhdpi. If the icon really is density independent (for example a solid color) you can place it in drawable-nodpi.",
                                "markdown": "The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
                            },
                            "defaultConfiguration": {
                                "level": "warning",
                                "rank": 60
                            },
                            "properties": {
                                "tags": [
                                    "Icons",
                                    "Usability"
                                ]
                            }
                        },
                        {
                            "id": "IconMissingDensityFolder",
                            "shortDescription": {
                                "text": "Missing density folder"
                            },
                            "fullDescription": {
                                "text": "Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as drawable-hdpi.\n\nLow density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable ANDROID_LINT_INCLUDE_LDPI=true. For more information on current density usage, see https://developer.android.com/about/dashboards",
                                "markdown": "Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.\n\nLow density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see https://developer.android.com/about/dashboards"
                            },
                            "defaultConfiguration": {
                                "level": "warning",
                                "rank": 80
                            },
                            "properties": {
                                "tags": [
                                    "Icons",
                                    "Usability"
                                ]
                            }
                        },
                        {
                            "id": "InflateParams",
                            "shortDescription": {
                                "text": "Layout Inflation without a Parent"
                            },
                            "fullDescription": {
                                "text": "When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
                            },
                            "defaultConfiguration": {
                                "level": "warning",
                                "rank": 60
                            },
                            "properties": {
                                "tags": [
                                    "Correctness"
                                ]
                            }
                        },
                        {
                            "id": "OldTargetApi",
                            "shortDescription": {
                                "text": "Target SDK attribute is not targeting latest version"
                            },
                            "fullDescription": {
                                "text": "When your application runs on a version of Android that is more recent than your targetSdkVersion specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the targetSdkVersion is less than 14, your app may get an option button in the UI.\n\nTo fix this issue, set the targetSdkVersion to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: https://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:\nhttps://developer.android.com/distribute/best-practices/develop/target-sdk.html",
                                "markdown": "When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.\n\nTo fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: https://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:\nhttps://developer.android.com/distribute/best-practices/develop/target-sdk.html"
                            },
                            "defaultConfiguration": {
                                "level": "warning",
                                "rank": 50
                            },
                            "properties": {
                                "tags": [
                                    "Correctness"
                                ]
                            }
                        },
                        {
                            "id": "StaticFieldLeak",
                            "shortDescription": {
                                "text": "Static Field Leaks"
                            },
                            "fullDescription": {
                                "text": "A static field will leak contexts.\n\nNon-static inner classes have an implicit reference to their outer class. If that outer class is for example a Fragment or Activity, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.\n\nSimilarly, direct field references to activities and fragments from these longer running instances can cause leaks.\n\nViewModel classes should never point to Views or non-application Contexts.",
                                "markdown": "A static field will leak contexts.\n\nNon-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.\n\nSimilarly, direct field references to activities and fragments from these longer running instances can cause leaks.\n\nViewModel classes should never point to Views or non-application Contexts."
                            },
                            "defaultConfiguration": {
                                "level": "warning",
                                "rank": 50
                            },
                            "properties": {
                                "tags": [
                                    "Performance"
                                ]
                            }
                        }
                    ]
                }
            },
            "originalUriBaseIds": {
                "%SRCROOT%": {
                    "uri": "file:///Users/enriquelopezmanas/Documents/android-maps-utils/"
                }
            },
            "results": [
                {
                    "ruleId": "DefaultLocale",
                    "ruleIndex": 0,
                    "message": {
                        "text": "Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead. For strings meant to be internal use Locale.ROOT, otherwise Locale.getDefault().",
                        "markdown": "Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/java/com/google/maps/android/data/kml/KmlLayer.java"
                                },
                                "region": {
                                    "startLine": 155,
                                    "startColumn": 59,
                                    "endLine": 155,
                                    "endColumn": 70,
                                    "charOffset": 6981,
                                    "charLength": 11,
                                    "snippet": {
                                        "text": "toLowerCase"
                                    }
                                },
                                "contextRegion": {
                                    "startLine": 153,
                                    "endLine": 158,
                                    "snippet": {
                                        "text": "                HashMap<String, Bitmap> images = new HashMap<>();\n                while (entry != null) {\n                    if (parser == null && entry.getName().toLowerCase().endsWith(\".kml\")) {\n                        parser = parseKml(zip);"
                                    }
                                }
                            }
                        }
                    ],
                    "partialFingerprints": {
                        "sourceContext/v1": "fdc2ef908321baba"
                    }
                },
                {
                    "ruleId": "OldTargetApi",
                    "ruleIndex": 5,
                    "message": {
                        "text": "Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details.",
                        "markdown": "Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the `android.os.Build.VERSION_CODES` javadoc for details."
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/build.gradle"
                                },
                                "region": {
                                    "startLine": 32,
                                    "startColumn": 9,
                                    "endLine": 32,
                                    "endColumn": 28,
                                    "charOffset": 909,
                                    "charLength": 19,
                                    "snippet": {
                                        "text": "targetSdkVersion 34"
                                    }
                                },
                                "contextRegion": {
                                    "startLine": 30,
                                    "endLine": 35,
                                    "snippet": {
                                        "text": "        compileSdk 34\n        minSdkVersion 21\n        targetSdkVersion 34\n        versionCode 1"
                                    }
                                }
                            }
                        }
                    ],
                    "fixes": [
                        {
                            "description": {
                                "text": "Update targetSdkVersion to 35"
                            },
                            "artifactChanges": [
                                {
                                    "artifactLocation": {
                                        "uriBaseId": "%SRCROOT%",
                                        "uri": "library/build.gradle"
                                    },
                                    "replacements": [
                                        {
                                            "deletedRegion": {
                                                "startLine": 32,
                                                "startColumn": 26,
                                                "charOffset": 926,
                                                "endLine": 32,
                                                "endColumn": 28,
                                                "charLength": 2
                                            },
                                            "insertedContent": {
                                                "text": "35\n"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "partialFingerprints": {
                        "sourceContext/v1": "491dfb4dcd483ca0"
                    }
                },
                {
                    "ruleId": "InflateParams",
                    "ruleIndex": 4,
                    "message": {
                        "text": "Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout's root element)",
                        "markdown": "Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout's root element)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/java/com/google/maps/android/ui/IconGenerator.java"
                                },
                                "region": {
                                    "startLine": 61,
                                    "startColumn": 98,
                                    "endLine": 61,
                                    "endColumn": 102,
                                    "charOffset": 1960,
                                    "charLength": 4,
                                    "snippet": {
                                        "text": "null"
                                    }
                                },
                                "contextRegion": {
                                    "startLine": 59,
                                    "endLine": 64,
                                    "snippet": {
                                        "text": "        mContext = context;\n        mBackground = new BubbleDrawable(mContext);\n        mContainer = (ViewGroup) LayoutInflater.from(mContext).inflate(R.layout.amu_text_bubble, null);\n        mRotationLayout = (RotationLayout) mContainer.getChildAt(0);"
                                    }
                                }
                            }
                        }
                    ],
                    "partialFingerprints": {
                        "sourceContext/v1": "bd8eed074935ba51"
                    }
                },
                {
                    "ruleId": "InflateParams",
                    "ruleIndex": 4,
                    "message": {
                        "text": "Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout's root element)",
                        "markdown": "Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout's root element)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/java/com/google/maps/android/data/Renderer.java"
                                },
                                "region": {
                                    "startLine": 1158,
                                    "startColumn": 93,
                                    "endLine": 1158,
                                    "endColumn": 97,
                                    "charOffset": 45853,
                                    "charLength": 4,
                                    "snippet": {
                                        "text": "null"
                                    }
                                },
                                "contextRegion": {
                                    "startLine": 1156,
                                    "endLine": 1161,
                                    "snippet": {
                                        "text": "\n            public View getInfoContents(@NonNull Marker arg0) {\n                View view = LayoutInflater.from(mContext).inflate(R.layout.amu_info_window, null);\n                TextView infoWindowText = view.findViewById(R.id.window);"
                                    }
                                }
                            }
                        }
                    ],
                    "partialFingerprints": {
                        "sourceContext/v1": "ff3da043c2ebd54c"
                    }
                },
                {
                    "ruleId": "StaticFieldLeak",
                    "ruleIndex": 6,
                    "message": {
                        "text": "This AsyncTask class should be static or leaks might occur (com.google.maps.android.clustering.ClusterManager.ClusterTask)",
                        "markdown": "This `AsyncTask` class should be static or leaks might occur (com.google.maps.android.clustering.ClusterManager.ClusterTask)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/java/com/google/maps/android/clustering/ClusterManager.java"
                                },
                                "region": {
                                    "startLine": 308,
                                    "startColumn": 19,
                                    "endLine": 308,
                                    "endColumn": 30,
                                    "charOffset": 11121,
                                    "charLength": 11,
                                    "snippet": {
                                        "text": "ClusterTask"
                                    }
                                },
                                "contextRegion": {
                                    "startLine": 306,
                                    "endLine": 311,
                                    "snippet": {
                                        "text": "     * Runs the clustering algorithm in a background thread, then re-paints when results come back.\n     */\n    private class ClusterTask extends AsyncTask<Float, Void, Set<? extends Cluster<T>>> {\n        @Override"
                                    }
                                }
                            }
                        }
                    ],
                    "partialFingerprints": {
                        "sourceContext/v1": "b49b52d814a6c6ea"
                    }
                },
                {
                    "ruleId": "StaticFieldLeak",
                    "ruleIndex": 6,
                    "message": {
                        "text": "This AsyncTask class should be static or leaks might occur (com.google.maps.android.data.kml.KmlRenderer.MarkerIconImageDownload)",
                        "markdown": "This `AsyncTask` class should be static or leaks might occur (com.google.maps.android.data.kml.KmlRenderer.MarkerIconImageDownload)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/java/com/google/maps/android/data/kml/KmlRenderer.java"
                                },
                                "region": {
                                    "startLine": 517,
                                    "startColumn": 19,
                                    "endLine": 517,
                                    "endColumn": 42,
                                    "charOffset": 20775,
                                    "charLength": 23,
                                    "snippet": {
                                        "text": "MarkerIconImageDownload"
                                    }
                                },
                                "contextRegion": {
                                    "startLine": 515,
                                    "endLine": 520,
                                    "snippet": {
                                        "text": "     * Downloads images for use as marker icons\n     */\n    private class MarkerIconImageDownload extends AsyncTask<String, Void, Bitmap> {\n"
                                    }
                                }
                            }
                        }
                    ],
                    "partialFingerprints": {
                        "sourceContext/v1": "b969decc032c6adb"
                    }
                },
                {
                    "ruleId": "StaticFieldLeak",
                    "ruleIndex": 6,
                    "message": {
                        "text": "This AsyncTask class should be static or leaks might occur (com.google.maps.android.data.kml.KmlRenderer.GroundOverlayImageDownload)",
                        "markdown": "This `AsyncTask` class should be static or leaks might occur (com.google.maps.android.data.kml.KmlRenderer.GroundOverlayImageDownload)"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/java/com/google/maps/android/data/kml/KmlRenderer.java"
                                },
                                "region": {
                                    "startLine": 572,
                                    "startColumn": 19,
                                    "endLine": 572,
                                    "endColumn": 45,
                                    "charOffset": 22510,
                                    "charLength": 26,
                                    "snippet": {
                                        "text": "GroundOverlayImageDownload"
                                    }
                                },
                                "contextRegion": {
                                    "startLine": 570,
                                    "endLine": 575,
                                    "snippet": {
                                        "text": "     * Downloads images for use as ground overlays\n     */\n    private class GroundOverlayImageDownload extends AsyncTask<String, Void, Bitmap> {\n"
                                    }
                                }
                            }
                        }
                    ],
                    "partialFingerprints": {
                        "sourceContext/v1": "717379d3c9b719d3"
                    }
                },
                {
                    "ruleId": "IconDuplicatesConfig",
                    "ruleIndex": 1,
                    "message": {
                        "text": "The amu_bubble_mask.9.png icon has identical contents in the following configuration folders: drawable-xhdpi, drawable",
                        "markdown": "The `amu_bubble_mask.9.png` icon has identical contents in the following configuration folders: drawable-xhdpi, drawable"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable/amu_bubble_mask.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "relatedLocations": [
                        {
                            "id": 1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable-xhdpi/amu_bubble_mask.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "partialFingerprints": {
                    }
                },
                {
                    "ruleId": "IconDuplicatesConfig",
                    "ruleIndex": 1,
                    "message": {
                        "text": "The amu_bubble_mask.9.png icon has identical contents in the following configuration folders: drawable-xxhdpi, drawable-xxxhdpi",
                        "markdown": "The `amu_bubble_mask.9.png` icon has identical contents in the following configuration folders: drawable-xxhdpi, drawable-xxxhdpi"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable-xxxhdpi/amu_bubble_mask.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "relatedLocations": [
                        {
                            "id": 1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable-xxhdpi/amu_bubble_mask.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "partialFingerprints": {
                    }
                },
                {
                    "ruleId": "IconDuplicatesConfig",
                    "ruleIndex": 1,
                    "message": {
                        "text": "The amu_bubble_shadow.9.png icon has identical contents in the following configuration folders: drawable-xhdpi, drawable",
                        "markdown": "The `amu_bubble_shadow.9.png` icon has identical contents in the following configuration folders: drawable-xhdpi, drawable"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable/amu_bubble_shadow.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "relatedLocations": [
                        {
                            "id": 1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable-xhdpi/amu_bubble_shadow.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "partialFingerprints": {
                    }
                },
                {
                    "ruleId": "IconDuplicatesConfig",
                    "ruleIndex": 1,
                    "message": {
                        "text": "The amu_bubble_shadow.9.png icon has identical contents in the following configuration folders: drawable-xxhdpi, drawable-xxxhdpi",
                        "markdown": "The `amu_bubble_shadow.9.png` icon has identical contents in the following configuration folders: drawable-xxhdpi, drawable-xxxhdpi"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable-xxxhdpi/amu_bubble_shadow.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "relatedLocations": [
                        {
                            "id": 1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable-xxhdpi/amu_bubble_shadow.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "partialFingerprints": {
                    }
                },
                {
                    "ruleId": "IconLocation",
                    "ruleIndex": 2,
                    "message": {
                        "text": "Found bitmap drawable res/drawable/amu_bubble_mask.9.png in densityless folder",
                        "markdown": "Found bitmap drawable `res/drawable/amu_bubble_mask.9.png` in densityless folder"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable/amu_bubble_mask.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "partialFingerprints": {
                    }
                },
                {
                    "ruleId": "IconLocation",
                    "ruleIndex": 2,
                    "message": {
                        "text": "Found bitmap drawable res/drawable/amu_bubble_shadow.9.png in densityless folder",
                        "markdown": "Found bitmap drawable `res/drawable/amu_bubble_shadow.9.png` in densityless folder"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res/drawable/amu_bubble_shadow.9.png"
                                },
                                "region": {
                                    "byteOffset": 0
                                }                            }
                        }
                    ],
                    "partialFingerprints": {
                    }
                },
                {
                    "ruleId": "IconMissingDensityFolder",
                    "ruleIndex": 3,
                    "message": {
                        "text": "Missing density variation folders in src/main/res: drawable-hdpi, drawable-mdpi",
                        "markdown": "Missing density variation folders in `src/main/res`: drawable-hdpi, drawable-mdpi"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uriBaseId": "%SRCROOT%",
                                    "uri": "library/src/main/res"
                                },
                                "region": {
                                    "startLine": 1
                                }                            }
                        }
                    ],
                    "partialFingerprints": {
                    }
                }
            ]
        }
    ]
}

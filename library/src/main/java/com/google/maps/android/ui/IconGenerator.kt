/*
 * Copyright 2025 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.maps.android.ui

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Rect
import android.graphics.drawable.Drawable
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import com.google.maps.android.R
import androidx.core.graphics.createBitmap

/**
 * IconGenerator generates icons that contain text (or custom content) within an info
 * window-like shape.
 *
 *
 * The icon [Bitmap]s generated by the factory should be used in conjunction with a [com.google.android.gms.maps.model.BitmapDescriptorFactory].
 *
 *
 * This class is not thread safe.
 */
class IconGenerator(private val context: Context) {
    private var container: ViewGroup =
        LayoutInflater.from(context).inflate(R.layout.amu_text_bubble, null) as ViewGroup
    private var rotationLayout: RotationLayout = container.getChildAt(0) as RotationLayout
    private var textView: TextView? = null
    private var contentView: View? = null
    private var rotation = 0
    private var _anchorU = 0.5f
    private var _anchorV = 1f
    private val background: BubbleDrawable = BubbleDrawable(context)

    init {
        textView = rotationLayout.findViewById(R.id.amu_text)
        contentView = textView
        setStyle(STYLE_DEFAULT)
    }

    /**
     * Sets the text content, then creates an icon with the current style.
     *
     * @param text the text content to display inside the icon.
     */
    fun makeIcon(text: CharSequence?): Bitmap {
        textView?.text = text
        return makeIcon()
    }

    /**
     * Creates an icon with the current content and style.
     *
     *
     * This method is useful if a custom view has previously been set, or if text content is not
     * applicable.
     */
    fun makeIcon(): Bitmap {
        val measureSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)
        container.measure(measureSpec, measureSpec)
        var measuredWidth = container.measuredWidth
        var measuredHeight = container.measuredHeight
        container.layout(0, 0, measuredWidth, measuredHeight)
        if (rotation == 1 || rotation == 3) {
            measuredHeight = container.measuredWidth
            measuredWidth = container.measuredHeight
        }
        val r = createBitmap(measuredWidth, measuredHeight)
        r.eraseColor(Color.TRANSPARENT)
        val canvas = Canvas(r)
        when (rotation) {
            1 -> {
                canvas.translate(measuredWidth.toFloat(), 0f)
                canvas.rotate(90f)
            }
            2 -> canvas.rotate(180f, (measuredWidth / 2).toFloat(), (measuredHeight / 2).toFloat())
            3 -> {
                canvas.translate(0f, measuredHeight.toFloat())
                canvas.rotate(270f)
            }
        }
        container.draw(canvas)
        return r
    }

    /**
     * Sets the child view for the icon.
     *
     *
     * If the view contains a [TextView] with the id "text", operations such as [.setTextAppearance] and [.makeIcon] will operate upon that [TextView].
     */
    fun setContentView(contentView: View) {
        rotationLayout.removeAllViews()
        rotationLayout.addView(contentView)
        this.contentView = contentView
        val view = rotationLayout.findViewById<View>(R.id.amu_text)
        textView = if (view is TextView) view else null
    }

    /**
     * Rotates the contents of the icon.
     *
     * @param degrees the amount the contents should be rotated, as a multiple of 90 degrees.
     */
    fun setContentRotation(degrees: Int) {
        rotationLayout.setViewRotation(degrees)
    }

    /**
     * Rotates the icon.
     *
     * @param degrees the amount the icon should be rotated, as a multiple of 90 degrees.
     */
    fun setRotation(degrees: Int) {
        rotation = (degrees + 360) % 360 / 90
    }

    /**
     * @return u coordinate of the anchor, with rotation applied.
     */
    fun getAnchorU(): Float {
        return rotateAnchor(_anchorU, _anchorV)
    }

    /**
     * @return v coordinate of the anchor, with rotation applied.
     */
    fun getAnchorV(): Float {
        return rotateAnchor(_anchorV, _anchorU)
    }

    /**
     * Rotates the anchor around (u, v) = (0, 0).
     */
    private fun rotateAnchor(u: Float, v: Float): Float {
        return when (rotation) {
            0 -> u
            1 -> 1 - v
            2 -> 1 - u
            3 -> v
            else -> throw IllegalStateException()
        }
    }

    /**
     * Sets the text color, size, style, hint color, and highlight color from the specified
     * `TextAppearance` resource.
     *
     * @param resid the identifier of the resource.
     */
    fun setTextAppearance(context: Context, resid: Int) {
        textView?.setTextAppearance(context, resid)
    }

    /**
     * Sets the text color, size, style, hint color, and highlight color from the specified
     * `TextAppearance` resource.
     *
     * @param resid the identifier of the resource.
     */
    fun setTextAppearance(resid: Int) {
        setTextAppearance(context, resid)
    }

    /**
     * Sets the style of the icon. The style consists of a background and text appearance.
     */
    fun setStyle(style: Int) {
        setColor(getStyleColor(style))
        setTextAppearance(context, getTextStyle(style))
    }

    /**
     * Sets the background to the default, with a given color tint.
     *
     * @param color the color for the background tint.
     */
    fun setColor(color: Int) {
        background.color = color
        setBackground(background)
    }

    /**
     * Set the background to a given Drawable, or remove the background.
     *
     * @param background the Drawable to use as the background, or null to remove the background.
     */
    fun setBackground(background: Drawable?) {
        container.background = background

        // Force setting of padding.
        // setBackgroundDrawable does not call setPadding if the background has 0 padding.
        if (background != null) {
            val rect = Rect()
            background.getPadding(rect)
            container.setPadding(rect.left, rect.top, rect.right, rect.bottom)
        } else {
            container.setPadding(0, 0, 0, 0)
        }
    }

    /**
     * Sets the padding of the content view. The default padding of the content view (i.e. text
     * view) is 5dp top/bottom and 10dp left/right.
     *
     * @param left   the left padding in pixels.
     * @param top    the top padding in pixels.
     * @param right  the right padding in pixels.
     * @param bottom the bottom padding in pixels.
     */
    fun setContentPadding(left: Int, top: Int, right: Int, bottom: Int) {
        contentView?.setPadding(left, top, right, bottom)
    }

    companion object {
        const val STYLE_DEFAULT = 1
        const val STYLE_WHITE = 2
        const val STYLE_RED = 3
        const val STYLE_BLUE = 4
        const val STYLE_GREEN = 5
        const val STYLE_PURPLE = 6
        const val STYLE_ORANGE = 7
        private fun getStyleColor(style: Int): Int {
            return when (style) {
                STYLE_RED -> -0x33ff01
                STYLE_BLUE -> -0xff6634
                STYLE_GREEN -> -0x996700
                STYLE_PURPLE -> -0x66cce7
                STYLE_ORANGE -> -0x7800
                STYLE_DEFAULT, STYLE_WHITE -> -0x1
                else -> -0x1
            }
        }

        private fun getTextStyle(style: Int): Int {
            return when (style) {
                STYLE_RED, STYLE_BLUE, STYLE_GREEN, STYLE_PURPLE, STYLE_ORANGE -> R.style.amu_Bubble_TextAppearance_Light
                STYLE_DEFAULT, STYLE_WHITE -> R.style.amu_Bubble_TextAppearance_Dark
                else -> R.style.amu_Bubble_TextAppearance_Dark
            }
        }
    }
}